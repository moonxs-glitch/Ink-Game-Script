local repo = "https://raw.githubusercontent.com/javierfabian828-maker/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

-- Main window
local Window = Library:CreateWindow({
	Title = "Moon Hub",
	Footer = "version: tester",
	Icon = 84833945573142,
	NotifySide = "Right",
	ToggleKeybind = Enum.KeyCode.LeftAlt,
	Font = Enum.Font.Fantasy,
	ShowCustomCursor = true,

	-- Other configs
	MinSize = Vector2.new(480, 360),
	DPIScale = 1,
	IsLightTheme = false,
})

-- Tabs
local Tabs = {
	Main = Window:AddTab("Main", "user", "Home"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings", "Configure your settings"),
}

-- Example groupbox
local MainGroup = Tabs.Main:AddLeftGroupbox("Example Groupbox", "moon")

MainGroup:AddLabel("SecondTestLabel", {
	Text = "Este texto necesita estar largo para ver si realmente funciona el Wrap y asi tener una conclusion mucho mas acertada",
	DoesWrap = true,
})

-- ========== Add your toggles, buttons, sliders, etc. here ==========

-- UI Settings Section
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})
MenuGroup:AddDropdown("NotificationSide", {
	Values = { "Left", "Right" },
	Default = "Right",
	Text = "Notification Side",
	Callback = function(Value)
		Library:SetNotifySide(Value)
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%",
	Text = "DPI Scale",
	Callback = function(Value)
		Value = Value:gsub("%%", "")
		local DPI = tonumber(Value)
		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
	:AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

-- Theme + Save
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("Moon Hub")
SaveManager:SetFolder("Moon Hub/specific-game") -- Change to actual game name
SaveManager:SetSubFolder("specific-place") -- Change to actual place name
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()

---------------------------------------------------------------------
-- FORCE UICorner on everything (Frames, Buttons, Labels, etc.)
---------------------------------------------------------------------
local function AddCornerRadius(obj, radius)
	if not obj:FindFirstChildOfClass("UICorner") then
		local corner = Instance.new("UICorner")
		corner.CornerRadius = UDim.new(0, radius)
		corner.Parent = obj
	end
end

local function Roundify(gui, radius)
	for _, obj in ipairs(gui:GetDescendants()) do
		if obj:IsA("Frame") or obj:IsA("TextButton") or obj:IsA("ImageLabel") or obj:IsA("TextBox") then
			AddCornerRadius(obj, radius)
		end
	end
	gui.DescendantAdded:Connect(function(obj)
		if obj:IsA("Frame") or obj:IsA("TextButton") or obj:IsA("ImageLabel") or obj:IsA("TextBox") then
			AddCornerRadius(obj, radius)
		end
	end)
end

task.spawn(function()
	local CoreGui = game:GetService("CoreGui")
	local gui
	repeat
		gui = CoreGui:FindFirstChild("Moon Hub", true) -- looks for your ScreenGui
		task.wait(0.1)
	until gui
	Roundify(gui, 4) -- apply radius 4 everywhere
end)
