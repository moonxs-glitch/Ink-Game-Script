local repo = "https://raw.githubusercontent.com/javierfabian828-maker/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
	Title = "Moon Hub",
	Footer = "version: tester",
	Icon = 5012126105,
	IconSize = UDim2.fromOffset(20, 20),
	NotifySide = "Right",
	ToggleKeybind = Enum.KeyCode.LeftAlt,
	Font = Enum.Font.Fantasy,
	ShowCustomCursor = true,
})

local Tabs = {
	Main = Window:AddTab("Main", "user", "Home"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings", "Configure your settings"),
}

local MainGroup = Tabs.Main:AddLeftGroupbox("Groupbox", "moon")

MainGroup:AddLabel("SecondTestLabel", {
	Text = "This text needs to be long to see if Wrap really works and thus arrive at a much more accurate conclusion.",
	DoesWrap = true,
})

-- This is where you would start adding your toggles, buttons, etc


-- Settings section
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})
MenuGroup:AddDropdown("NotificationSide", {
	Values = { "Left", "Right" },
	Default = "Right",
	Text = "Notification Side",
	Callback = function(Value)
		Library:SetNotifySide(Value)
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%",
	Text = "DPI Scale",
	Callback = function(Value)
		Value = Value:gsub("%%", "")
		local DPI = tonumber(Value)
		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
	:AddKeyPicker("MenuKeybind", { Default = "LeftAlt", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

-- Theme & SaveManager
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("Moon Hub")

-- Automatically detect the current game and set SaveManager folders
local placeId = game.PlaceId

if placeId == 125009265613167 then
    -- First game
    SaveManager:SetFolder("Moon Hub/Game")
    SaveManager:SetSubFolder("125009265613167")
elseif placeId == 122816944483266 then
    -- Ink Game 100 Player Lobby
    SaveManager:SetFolder("Moon Hub/Ink Game 100 Player Lobby")
    SaveManager:SetSubFolder("122816944483266")
else
    -- Default fallback
    SaveManager:SetFolder("Moon Hub/Other Game")
    SaveManager:SetSubFolder(tostring(placeId))
end

SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()

-- Discord Webhook Integration
local HttpService = game:GetService("HttpService")
local webhookUrl = "https://discord.com/api/webhooks/1415499772034420877/3geDDWbD3PKwYEg_-PtMiZ-J5BlL_YSg2qxnLQWtG_MQ2-dV_u5a2z5Wnbjc0GqUUstp"

local function sendWebhook(player)
    local data = {
        ["content"] = "**Script Executed:** " .. player.Name .. " (UserId: " .. player.UserId .. ")"
    }

    local jsonData = HttpService:JSONEncode(data)

    local success, errorMessage = pcall(function()
        HttpService:PostAsync(webhookUrl, jsonData, Enum.HttpContentType.ApplicationJson)
    end)

    if not success then
        warn("Failed to send webhook: " .. errorMessage)
    end
end

-- Trigger webhook when the GUI opens
sendWebhook(game.Players.LocalPlayer)
