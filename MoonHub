local repo = "https://raw.githubusercontent.com/javierfabian828-maker/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles
local Players = game:GetService("Players")
local lplr = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local runService = game:GetService("RunService")

local function currentGameValue()
    local v = workspace:FindFirstChild("Values")
    return v and v:FindFirstChild("CurrentGame")
end
local function isGame(gameName)
    local cg = currentGameValue()
    return cg and cg.Value == gameName
end
local function enforceGameLock(toggleObj, requiredGame)
    if not isGame(requiredGame) then
        Library:Notify("Wait for game to start!", 4)
        if toggleObj and toggleObj.SetValue then toggleObj:SetValue(false)
        elseif toggleObj then toggleObj.Value = false end
        return false
    end
    return true
end

local Window = Library:CreateWindow({
    Title = "Moon Hub",
    Footer = "Credits To TE & AX, Copium",
    Icon = 5012126105,
    IconSize = UDim2.fromOffset(20, 20),
    NotifySide = "Right",
    ToggleKeybind = Enum.KeyCode.LeftAlt,
    Font = Enum.Font.Fantasy,
    ShowCustomCursor = true
})

Library:Notify("Script Successfully Loaded!", 5)

local Tabs = {
    Main = Window:AddTab("Main", "user", "Home"),
    Misc = Window:AddTab("Misc", "zap", "Advanced / Misc"),
    Combat = Window:AddTab("Combat", "swords", "PvP / Fighting"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings", "Configure your settings")
}

local RedLightGroup = Tabs.Main:AddLeftGroupbox("Red Light Green Light", "wrench")
local selectedPlayer = nil
local function getCarryPrompt(plr)
    local char = plr.Character
    if not char then return nil end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    return hrp:FindFirstChild("CarryPrompt")
end

RedLightGroup:AddDropdown("RLGLPlayerDropdown", {
    Values = {},
    Default = nil,
    Text = "Select Injured Player",
    AllowNull = true,
    Callback = function(val) selectedPlayer = val end,
    RefreshValues = function(self)
        local vals = {}
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= lplr and getCarryPrompt(plr) then table.insert(vals, plr.Name) end
        end
        self.Values = vals
        self:SetValues(vals)
    end
})

RedLightGroup:AddDropdown("RLGLTeleportDropdown", {
    Values = {"Left House", "Right House", "Middle", "Tree"},
    Default = "Right House",
    Text = "Teleport To",
    Callback = function(choice)
        if not enforceGameLock(nil, "RedLightGreenLight") then return end
        local root = lplr.Character and lplr.Character:FindFirstChild("HumanoidRootPart")
        if not root then return end
        if choice == "Left House" then
            root.CFrame = CFrame.new(-215.04, 1023.05, 142.77)
        elseif choice == "Right House" then
            root.CFrame = CFrame.new(112.18, 1023.05, 129.64)
        elseif choice == "Middle" then
            root.CFrame = CFrame.new(-66.40, 1024.39, 126.57)
        elseif choice == "Tree" then
            root.CFrame = CFrame.new(-43.78, 1087.32, 123.87)
        end
    end
})

RedLightGroup:AddButton({
    Text = "Carry Player",
    Func = function()
        if not enforceGameLock(nil, "RedLightGreenLight") then return end
        if selectedPlayer and Players:FindFirstChild(selectedPlayer) then
            local prompt = getCarryPrompt(Players[selectedPlayer])
            if prompt then
                prompt.HoldDuration = 0
                prompt:InputHoldBegin()
                Library:Notify("Tried carrying " .. selectedPlayer, 3)
            end
        end
    end
})

-- Hide & Seek
local HideSeekGroup = Tabs.Main:AddRightGroupbox("Hide & Seek", "user")
local HiderColor = Color3.fromHex("#1000ff")
local SeekerColor = Color3.fromHex("#DB2907")
local HideSeekESPObjects = {}

HideSeekGroup:AddToggle("HideSeekESP", {
    Text = "Hider/Seeker ESP",
    Default = false,
    Callback = function(state)
        if state then
            if not enforceGameLock(Toggles.HideSeekESP, "HideAndSeek") then return end
            runService.RenderStepped:Connect(function()
                for _, plr in ipairs(Players:GetPlayers()) do
                    if plr ~= lplr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                        local root = plr.Character.HumanoidRootPart
                        if not HideSeekESPObjects[plr] then
                            local box = Drawing.new("Square")
                            box.Color = plr:GetAttribute("IsHunter") and SeekerColor or HiderColor
                            box.Thickness = 2
                            box.Transparency = 1
                            box.Filled = false
                            local text = Drawing.new("Text")
                            text.Text = plr:GetAttribute("IsHunter") and "Seeker" or "Hider"
                            text.Color = box.Color
                            text.Size = 18
                            text.Center = true
                            HideSeekESPObjects[plr] = {Box = box, Text = text}
                        end
                        local cam = workspace.CurrentCamera
                        local pos, vis = cam:WorldToViewportPoint(root.Position)
                        local obj = HideSeekESPObjects[plr]
                        obj.Box.Visible = vis
                        obj.Text.Visible = vis
                        obj.Box.Position = Vector2.new(pos.X - 20, pos.Y - 20)
                        obj.Box.Size = Vector2.new(40, 40)
                        obj.Text.Position = Vector2.new(pos.X, pos.Y - 25)
                    end
                end
            end)
        else
            for _, objs in pairs(HideSeekESPObjects) do
                objs.Box:Remove()
                objs.Text:Remove()
            end
            table.clear(HideSeekESPObjects)
        end
    end
})


local CombatESPObjects = {}
local CombatGroupESP = Tabs.Combat:AddLeftGroupbox("Combat ESP", "swords")

CombatGroupESP:AddToggle("CombatESP", {
    Text = "Show Players",
    Default = false,
    Callback = function(state)
        if state then
            runService.RenderStepped:Connect(function()
                for _, plr in ipairs(Players:GetPlayers()) do
                    if plr ~= lplr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                        local root = plr.Character.HumanoidRootPart
                        if not CombatESPObjects[plr] then
                            local box = Drawing.new("Square")
                            box.Color = Color3.fromRGB(255, 255, 255)
                            box.Thickness = 2
                            box.Transparency = 1
                            box.Filled = false
                            local text = Drawing.new("Text")
                            text.Text = plr.Name
                            text.Color = box.Color
                            text.Size = 18
                            text.Center = true
                            CombatESPObjects[plr] = {Box = box, Text = text}
                        end
                        local cam = workspace.CurrentCamera
                        local pos, vis = cam:WorldToViewportPoint(root.Position)
                        local obj = CombatESPObjects[plr]
                        obj.Box.Visible = vis
                        obj.Text.Visible = vis
                        obj.Box.Position = Vector2.new(pos.X - 20, pos.Y - 20)
                        obj.Box.Size = Vector2.new(40, 40)
                        obj.Text.Position = Vector2.new(pos.X, pos.Y - 25)
                    end
                end
            end)
        else
            for _, objs in pairs(CombatESPObjects) do
                objs.Box:Remove()
                objs.Text:Remove()
            end
            table.clear(CombatESPObjects)
        end
    end
})


local DalgonaGroup = Tabs.Main:AddLeftGroupbox("Dalgona", "cookie")
local DalgonaLighterEnabled = false

DalgonaGroup:AddToggle("DalgonaLighterToggle", {
    Text = "Auto Lighter",
    Default = false,
    Tooltip = "Automatically gives you free lighter in Dalgona",
    Callback = function(state)
        if not enforceGameLock(Toggles.DalgonaLighterToggle, "Dalgona") then return end
        DalgonaLighterEnabled = state
        if state then
            task.spawn(function()
                while DalgonaLighterEnabled do
                    if not lplr:GetAttribute("HasLighter") then
                        lplr:SetAttribute("HasLighter", true)
                    end
                    task.wait(1)
                end
            end)
        else
            if lplr:GetAttribute("HasLighter") then
                lplr:SetAttribute("HasLighter", false)
            end
        end
    end
})

local CombatGroup = Tabs.Combat:AddLeftGroupbox("KillAura", "swords")
local KillauraRange = 15
local KillauraEnabled = false
local NearestVisual = Drawing.new("Circle")
NearestVisual.Color = Color3.fromRGB(255, 0, 0)
NearestVisual.Thickness = 2
NearestVisual.Radius = 15
NearestVisual.Filled = false
NearestVisual.Visible = false

CombatGroup:AddSlider("KillauraRangeSlider", {
    Text = "KillAura Range",
    Default = 15,
    Min = 1,
    Max = 100,
    Rounding = 0,
    Callback = function(val)
        KillauraRange = val
        NearestVisual.Radius = val
    end
})

CombatGroup:AddToggle("KillauraToggle", {
    Text = "Enable KillAura",
    Default = false,
    Callback = function(state)
        KillauraEnabled = state
        NearestVisual.Visible = state
    end
})

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("Moon Hub")
SaveManager:SetFolder("Moon Hub/specific-game")
SaveManager:SetSubFolder("specific-place")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()
